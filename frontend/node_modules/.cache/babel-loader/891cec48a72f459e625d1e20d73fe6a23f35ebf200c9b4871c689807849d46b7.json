{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ducal\\\\OneDrive\\\\Documents\\\\document-verifier\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { ipfs } from \"./ipfs\";\nimport abi from \"./abi/DocumentVerifier.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"; // ƒë·ªãa ch·ªâ b·∫°n deploy ·ªü tr√™n\n\nfunction App() {\n  _s();\n  const [account, setAccount] = useState(\"\");\n  const [file, setFile] = useState(null);\n  const [status, setStatus] = useState(\"\");\n  async function connectWallet() {\n    const [addr] = await window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    setAccount(addr);\n  }\n  async function uploadFile() {\n    if (!file) return alert(\"Ch·ªçn file!\");\n    const buffer = await file.arrayBuffer();\n    const hash = ethers.sha256(new Uint8Array(buffer));\n    setStatus(\"‚è≥ Uploading...\");\n    const added = await ipfs.add(file);\n    const ipfsUrl = `https://ipfs.io/ipfs/${added.path}`;\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    const signer = await provider.getSigner();\n    const contract = new ethers.Contract(CONTRACT_ADDRESS, abi.abi, signer);\n    const tx = await contract.storeDocument(hash);\n    await tx.wait();\n    setStatus(`‚úÖ L∆∞u th√†nh c√¥ng!\\nHash: ${hash}\\nIPFS: ${ipfsUrl}`);\n  }\n  async function verifyFile() {\n    if (!file) return alert(\"Ch·ªçn file!\");\n    const buffer = await file.arrayBuffer();\n    const hash = ethers.sha256(new Uint8Array(buffer));\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    const contract = new ethers.Contract(CONTRACT_ADDRESS, abi.abi, provider);\n    const [exists, issuer, timestamp] = await contract.verifyDocument(hash);\n    setStatus(exists ? `‚úÖ C√≥ tr√™n chain!\\nIssuer: ${issuer}\\nTime: ${new Date(timestamp * 1000)}` : \"‚ùå Kh√¥ng t√¨m th·∫•y t√†i li·ªáu!\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDCDC Document Verifier (Localhost)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWallet,\n      children: \"\\uD83D\\uDD17 K\\u1EBFt n\\u1ED1i MetaMask\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u0110\\u1ECBa ch\\u1EC9 v\\xED: \", account]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: e => setFile(e.target.files[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: uploadFile,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: verifyFile,\n      children: \"Verify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"jhX+mw13N3D/03rgk5vt5xE7bNk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","ethers","ipfs","abi","jsxDEV","_jsxDEV","CONTRACT_ADDRESS","App","_s","account","setAccount","file","setFile","status","setStatus","connectWallet","addr","window","ethereum","request","method","uploadFile","alert","buffer","arrayBuffer","hash","sha256","Uint8Array","added","add","ipfsUrl","path","provider","BrowserProvider","signer","getSigner","contract","Contract","tx","storeDocument","wait","verifyFile","exists","issuer","timestamp","verifyDocument","Date","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","onChange","e","target","files","_c","$RefreshReg$"],"sources":["C:/Users/ducal/OneDrive/Documents/document-verifier/frontend/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { ipfs } from \"./ipfs\";\nimport abi from \"./abi/DocumentVerifier.json\";\n\nconst CONTRACT_ADDRESS = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"; // ƒë·ªãa ch·ªâ b·∫°n deploy ·ªü tr√™n\n\nfunction App() {\n  const [account, setAccount] = useState(\"\");\n  const [file, setFile] = useState(null);\n  const [status, setStatus] = useState(\"\");\n\n  async function connectWallet() {\n    const [addr] = await window.ethereum.request({ method: \"eth_requestAccounts\" });\n    setAccount(addr);\n  }\n\n  async function uploadFile() {\n    if (!file) return alert(\"Ch·ªçn file!\");\n    const buffer = await file.arrayBuffer();\n    const hash = ethers.sha256(new Uint8Array(buffer));\n\n    setStatus(\"‚è≥ Uploading...\");\n    const added = await ipfs.add(file);\n    const ipfsUrl = `https://ipfs.io/ipfs/${added.path}`;\n\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    const signer = await provider.getSigner();\n    const contract = new ethers.Contract(CONTRACT_ADDRESS, abi.abi, signer);\n\n    const tx = await contract.storeDocument(hash);\n    await tx.wait();\n\n    setStatus(`‚úÖ L∆∞u th√†nh c√¥ng!\\nHash: ${hash}\\nIPFS: ${ipfsUrl}`);\n  }\n\n  async function verifyFile() {\n    if (!file) return alert(\"Ch·ªçn file!\");\n    const buffer = await file.arrayBuffer();\n    const hash = ethers.sha256(new Uint8Array(buffer));\n\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    const contract = new ethers.Contract(CONTRACT_ADDRESS, abi.abi, provider);\n\n    const [exists, issuer, timestamp] = await contract.verifyDocument(hash);\n\n    setStatus(\n      exists\n        ? `‚úÖ C√≥ tr√™n chain!\\nIssuer: ${issuer}\\nTime: ${new Date(timestamp * 1000)}`\n        : \"‚ùå Kh√¥ng t√¨m th·∫•y t√†i li·ªáu!\"\n    );\n  }\n\n  return (\n    <div style={{ padding: 20 }}>\n      <h2>üìú Document Verifier (Localhost)</h2>\n      <button onClick={connectWallet}>üîó K·∫øt n·ªëi MetaMask</button>\n      <p>ƒê·ªãa ch·ªâ v√≠: {account}</p>\n      <input type=\"file\" onChange={(e) => setFile(e.target.files[0])} />\n      <button onClick={uploadFile}>Upload</button>\n      <button onClick={verifyFile}>Verify</button>\n      <pre>{status}</pre>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}