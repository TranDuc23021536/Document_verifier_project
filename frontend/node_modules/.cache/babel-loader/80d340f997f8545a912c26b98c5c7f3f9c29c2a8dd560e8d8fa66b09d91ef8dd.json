{"ast":null,"code":"import { IpNet } from '@chainsafe/netmask';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { registry } from './registry.js';\nexport function convertToIpNet(multiaddr) {\n  let mask;\n  let addr;\n  multiaddr.getComponents().forEach(component => {\n    if (component.name === 'ip4' || component.name === 'ip6') {\n      addr = component.value;\n    }\n    if (component.name === 'ipcidr') {\n      mask = component.value;\n    }\n  });\n  if (mask == null || addr == null) {\n    throw new Error('Invalid multiaddr');\n  }\n  return new IpNet(addr, mask);\n}\nexport function convert(proto, a) {\n  if (a instanceof Uint8Array) {\n    return convertToString(proto, a);\n  } else {\n    return convertToBytes(proto, a);\n  }\n}\n/**\n * Convert [code, Uint8Array] to string\n *\n * @deprecated Will be removed in a future release\n */\nexport function convertToString(proto, buf) {\n  const protocol = registry.getProtocol(proto);\n  return protocol.bytesToValue?.(buf) ?? uint8ArrayToString(buf, 'base16'); // no clue. convert to hex\n}\n/**\n * Convert [code, string] to Uint8Array\n *\n * @deprecated Will be removed in a future release\n */\nexport function convertToBytes(proto, str) {\n  const protocol = registry.getProtocol(proto);\n  return protocol.valueToBytes?.(str) ?? uint8ArrayFromString(str, 'base16'); // no clue. convert from hex\n}","map":{"version":3,"names":["IpNet","fromString","uint8ArrayFromString","toString","uint8ArrayToString","registry","convertToIpNet","multiaddr","mask","addr","getComponents","forEach","component","name","value","Error","convert","proto","a","Uint8Array","convertToString","convertToBytes","buf","protocol","getProtocol","bytesToValue","str","valueToBytes"],"sources":["C:\\Users\\ducal\\OneDrive\\Documents\\document-verifier\\frontend\\node_modules\\@multiformats\\multiaddr-to-uri\\node_modules\\@multiformats\\multiaddr\\src\\convert.ts"],"sourcesContent":["import { IpNet } from '@chainsafe/netmask'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { registry } from './registry.js'\nimport type { Multiaddr } from './index.ts'\n\nexport function convertToIpNet (multiaddr: Multiaddr): IpNet {\n  let mask: string | undefined\n  let addr: string | undefined\n\n  multiaddr.getComponents().forEach(component => {\n    if (component.name === 'ip4' || component.name === 'ip6') {\n      addr = component.value\n    }\n    if (component.name === 'ipcidr') {\n      mask = component.value\n    }\n  })\n\n  if (mask == null || addr == null) {\n    throw new Error('Invalid multiaddr')\n  }\n\n  return new IpNet(addr, mask)\n}\n\n/**\n * converts (serializes) addresses\n *\n * @deprecated Will be removed in a future release\n */\nexport function convert (proto: string, a: string): Uint8Array\nexport function convert (proto: string, a: Uint8Array): string\nexport function convert (proto: string, a: string | Uint8Array): Uint8Array | string {\n  if (a instanceof Uint8Array) {\n    return convertToString(proto, a)\n  } else {\n    return convertToBytes(proto, a)\n  }\n}\n\n/**\n * Convert [code, Uint8Array] to string\n *\n * @deprecated Will be removed in a future release\n */\nexport function convertToString (proto: number | string, buf: Uint8Array): string {\n  const protocol = registry.getProtocol(proto)\n\n  return protocol.bytesToValue?.(buf) ?? uint8ArrayToString(buf, 'base16')  // no clue. convert to hex\n}\n\n/**\n * Convert [code, string] to Uint8Array\n *\n * @deprecated Will be removed in a future release\n */\nexport function convertToBytes (proto: string | number, str: string): Uint8Array {\n  const protocol = registry.getProtocol(proto)\n\n  return protocol.valueToBytes?.(str) ?? uint8ArrayFromString(str, 'base16') // no clue. convert from hex\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,oBAAoB;AAC1C,SAASC,UAAU,IAAIC,oBAAoB,QAAQ,yBAAyB;AAC5E,SAASC,QAAQ,IAAIC,kBAAkB,QAAQ,uBAAuB;AACtE,SAASC,QAAQ,QAAQ,eAAe;AAGxC,OAAM,SAAUC,cAAcA,CAAEC,SAAoB;EAClD,IAAIC,IAAwB;EAC5B,IAAIC,IAAwB;EAE5BF,SAAS,CAACG,aAAa,EAAE,CAACC,OAAO,CAACC,SAAS,IAAG;IAC5C,IAAIA,SAAS,CAACC,IAAI,KAAK,KAAK,IAAID,SAAS,CAACC,IAAI,KAAK,KAAK,EAAE;MACxDJ,IAAI,GAAGG,SAAS,CAACE,KAAK;IACxB;IACA,IAAIF,SAAS,CAACC,IAAI,KAAK,QAAQ,EAAE;MAC/BL,IAAI,GAAGI,SAAS,CAACE,KAAK;IACxB;EACF,CAAC,CAAC;EAEF,IAAIN,IAAI,IAAI,IAAI,IAAIC,IAAI,IAAI,IAAI,EAAE;IAChC,MAAM,IAAIM,KAAK,CAAC,mBAAmB,CAAC;EACtC;EAEA,OAAO,IAAIf,KAAK,CAACS,IAAI,EAAED,IAAI,CAAC;AAC9B;AASA,OAAM,SAAUQ,OAAOA,CAAEC,KAAa,EAAEC,CAAsB;EAC5D,IAAIA,CAAC,YAAYC,UAAU,EAAE;IAC3B,OAAOC,eAAe,CAACH,KAAK,EAAEC,CAAC,CAAC;EAClC,CAAC,MAAM;IACL,OAAOG,cAAc,CAACJ,KAAK,EAAEC,CAAC,CAAC;EACjC;AACF;AAEA;;;;;AAKA,OAAM,SAAUE,eAAeA,CAAEH,KAAsB,EAAEK,GAAe;EACtE,MAAMC,QAAQ,GAAGlB,QAAQ,CAACmB,WAAW,CAACP,KAAK,CAAC;EAE5C,OAAOM,QAAQ,CAACE,YAAY,GAAGH,GAAG,CAAC,IAAIlB,kBAAkB,CAACkB,GAAG,EAAE,QAAQ,CAAC,EAAE;AAC5E;AAEA;;;;;AAKA,OAAM,SAAUD,cAAcA,CAAEJ,KAAsB,EAAES,GAAW;EACjE,MAAMH,QAAQ,GAAGlB,QAAQ,CAACmB,WAAW,CAACP,KAAK,CAAC;EAE5C,OAAOM,QAAQ,CAACI,YAAY,GAAGD,GAAG,CAAC,IAAIxB,oBAAoB,CAACwB,GAAG,EAAE,QAAQ,CAAC,EAAC;AAC7E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}